// -*-C++-*-
//@HEADER
//----------------------------------------------------------------------------
//                Copyright (C) 2021 NumGeom Group at Stony Brook University
//----------------------------------------------------------------------------
//@HEADER

/*! \page _examples Collection of examples

\addindex examples
\tableofcontents

\section _eg_beginner Beginner

- \ref demo_simple.cpp
- \ref demo_trans.cpp
- \ref demo_verbose.cpp

\section _eg_intermediate Intermediate

- \ref demo_params.cpp
- \ref demo_multiply.cpp
- \ref demo_mixedprecision.cpp
- \ref demo_complex.cpp

\section _eg_advanced Advanced

- \ref demo_hifir.cpp
- \ref demo_gmreshif.cpp
- \ref demo_sparsifier.cpp

*/

/// \example demo_simple.cpp
/// This example illustrates the essentail usage of a HIF preconditioner, i.e.
/// its multilevel triangular solve.

/// \example demo_trans.cpp
/// This example is similar to \ref demo_simple.cpp, but it illustrates how to
/// perform transpose/Hermitian multilevel triangular solve.

/// \example demo_verbose.cpp
/// This example shows you how to disable logging in HIFIR or enable different
/// levels of logging.

/// \example demo_params.cpp
/// This example illustrates how to tune core parameters for HIF, such as \f$\tau\f$,
/// aka \a droptol, \f$\alpha\f$ (fill factor), and \f$\kappa\f$ (inverse-norm
/// threshold).

/// \example demo_multiply.cpp
/// This example illustrates how to use multilevel matrix-vector multiplication,
/// which is uncommon in preconditioning but can be useful in
/// developing some advanced techniques, such as in the context of computing
/// null-space vectors or solving singular systems.

/// \example demo_mixedprecision.cpp
/// This example illustrates how to enable mixed-precision computation.

/// \example demo_complex.cpp
/// This example illustrates how to use complex arithmetic in HIFIR library.

/// \example demo_hifir.cpp
/// This example shows how to perform HIF with iterative refinement (HIFIR).

/// \example demo_gmreshif.cpp
/// This example shows how to incorporate HIF in right-preconditioned GMRES, leading
/// to HIF-preconditioned GMRES. The users can use their own systems by either
///     1. calling \ref hif::wrap_const_crs or \ref hif::wrap_const_ccs to wrap
///        their sparse matrices and calling \ref hif::wrap_const_array to wrap
///        the right-hand-side vectors, or
///     2. loading their systems in Matrix Market file format; for instance,
///        one can call \ref hif::CRS::from_mm and \ref hif::Array::from_mm to
///        load the sparse matrix and its corresponding RHS vector (if
///        applicable), respectively.
/// In addition, the user may pass their system via command line inputs; see
/// ./demo_gmreshif.exe --help

/// \example demo_sparsifier.cpp
/// This example shows an example of using HIF as right-preconditioner for
/// GMRES(m), where HIF can be computed via a sparser matrix than the one used
/// in the GMRES solver, i.e.,
///
/// \f[
///     AM^{g}y=b\quad\text{then}\quad x=M^{g}y,
/// \f]
///
/// where \f$ M\f$ can is computed on a sparser matrix \f$ S\f$ (hence the name
/// "sparsifier"), s.t. \f$\text{nnz}(S)\le\text{nnz}(A)\f$. In this example,
/// we solve 2D advection-diffusion equation with FDM on the unit square with
/// equidistance structured grids of \f$ 64\times 64\f$. In particular, we use
/// the 2nd-order FDM as sparsifier to precondition the 4th-order coefficient
/// matrix. Try to compare <em>./demo_sparsifier.exe</em> and
/// <em>./demo_gmreshif.exe -Afile ../demo_inputs/ad-fdm4.mm</em>.
