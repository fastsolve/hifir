///////////////////////////////////////////////////////////////////////////////
//                  This file is part of HIF project                         //
///////////////////////////////////////////////////////////////////////////////

#include "common.hpp"
// line break to avoid sorting
#include "hif/Options.h"
#include "hif/ds/CompressedStorage.hpp"
#include "hif/ds/DenseMatrix.hpp"
#include "hif/small_scale/solver.hpp"

#include <gtest/gtest.h>

using namespace hif;

constexpr static double tol(1e-10);

TEST(SYEV, d) {
  // randomized symmetric matrix from MATLAB of 10x10, in row order
  // generate rhs b then solve with backslash and save in x_ref
  const static double a[100] =
      {1.9508080999881905e-01, 4.2038455749426373e-01, 1.3046216497833174e+00,
       1.7809646637615901e+00, 1.4546529309875076e+00, 6.5597713365969124e-01,
       1.9298842069660600e+00, 1.3071507142277543e+00, 7.7121466754321477e-01,
       9.3018667736253025e-01, 4.2038455749426373e-01, 8.4352256525254998e-01,
       1.6588679933139834e+00, 1.4870359525353716e+00, 1.4050786271038025e+00,
       1.6154846576726678e+00, 5.8292720853799262e-01, 1.0457245562999853e+00,
       1.6911934768682717e+00, 1.2475588157299662e+00, 1.3046216497833174e+00,
       1.6588679933139834e+00, 7.8445403906833633e-01, 9.7257737023841717e-01,
       8.1749969792282640e-01, 1.0464318146857421e+00, 1.7045728920609982e-01,
       5.2800684293692102e-01, 7.9990048490964927e-01, 5.6652242229405336e-01,
       1.7809646637615901e+00, 1.4870359525353716e+00, 9.7257737023841717e-01,
       1.9004440976767099e+00, 7.4381091136098132e-01, 1.0240121106361757e+00,
       5.3085246265206587e-01, 1.3815614642956415e+00, 1.1756457481124198e+00,
       1.9877467405561999e-01, 1.4546529309875076e+00, 1.4050786271038025e+00,
       8.1749969792282640e-01, 7.4381091136098132e-01, 1.5093733639647218e+00,
       4.9983701648971535e-01, 9.3721093097741126e-01, 1.1283868528765699e+00,
       7.3043337591985169e-01, 4.5612032595725815e-01, 6.5597713365969124e-01,
       1.6154846576726678e+00, 1.0464318146857421e+00, 1.0240121106361757e+00,
       4.9983701648971535e-01, 1.5025341186113057e+00, 1.0958123714429315e+00,
       8.5761655872813913e-01, 7.7493101221974958e-01, 1.0530855607290412e+00,
       1.9298842069660600e+00, 5.8292720853799262e-01, 1.7045728920609982e-01,
       5.3085246265206587e-01, 9.3721093097741126e-01, 1.0958123714429315e+00,
       5.0856435794306210e-01, 1.6451134539651071e+00, 2.9747508739159645e-01,
       1.7235481638711347e+00, 1.3071507142277543e+00, 1.0457245562999853e+00,
       5.2800684293692102e-01, 1.3815614642956415e+00, 1.1283868528765699e+00,
       8.5761655872813913e-01, 1.6451134539651071e+00, 1.1705281823054485e+00,
       1.0805211613001122e+00, 1.2284087058746149e+00, 7.7121466754321477e-01,
       1.6911934768682717e+00, 7.9990048490964927e-01, 1.1756457481124198e+00,
       7.3043337591985169e-01, 7.7493101221974958e-01, 2.9747508739159645e-01,
       1.0805211613001122e+00, 1.5583344602040223e+00, 1.4625438197353957e+00,
       9.3018667736253025e-01, 1.2475588157299662e+00, 5.6652242229405336e-01,
       1.9877467405561999e-01, 4.5612032595725815e-01, 1.0530855607290412e+00,
       1.7235481638711347e+00, 1.2284087058746149e+00, 1.4625438197353957e+00,
       3.3129745899956187e-01},
                      b[10] =
                          {
                              6.0198194140163652e-01, 2.6297128454014429e-01,
                              6.5407909847678225e-01, 6.8921450314000776e-01,
                              7.4815159282370947e-01, 4.5054159850249775e-01,
                              8.3821377996932567e-02, 2.2897696871681883e-01,
                              9.1333736150166955e-01, 1.5237801896922298e-01,
                          },
                      x_ref[10] = {
                          -1.3996645573342287e+01, 6.6851870068387171e+00,
                          -2.2961775945834653e+01, 5.0241225674837429e+00,
                          1.2694630962809558e+01,  1.1772463146455713e+01,
                          -4.3555297092725027e+00, 9.6381131723032603e+00,
                          -2.1269636685692541e+00, -7.7516127794787231e+00,
                      };
  Array<double> x(10);
  std::copy(b, b + 10, x.begin());

  using crs_t = CRS<double, int>;
  crs_t               crs(10, 10);
  std::vector<double> buf(10);
  const static int    inds[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  const double*       v_ptr    = a;
  crs.begin_assemble_rows();
  for (int i = 0; i < 10; ++i) {
    std::copy(v_ptr, v_ptr + 10, buf.begin());
    crs.push_back_row(i, inds, inds + 10, buf);
    v_ptr += 10;
  }
  crs.end_assemble_rows();

  SYEIG<double> eig;
  eig.set_matrix(crs);
  eig.factorize(get_default_options());
  ASSERT_TRUE(eig.full_rank()) << "should be full rank!\n";
  eig.solve(x);
  for (int i = 0; i < 10; ++i)
    EXPECT_NEAR(x[i], x_ref[i], tol)
        << i << " entry doesn\'t agree with reference solution\n";
}